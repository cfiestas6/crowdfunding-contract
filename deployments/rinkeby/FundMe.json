{
  "address": "0x962eDFa4B7A7E75dcf97e2Bb31B1D028581d16F9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9f03fd28c5318bb9e859b32354ba3660b1b8eb6e9441b83d064a259ee38cb38e",
  "receipt": {
    "to": null,
    "from": "0x88fC482e0586C224F3ec231738Dd0447bF2C76B3",
    "contractAddress": "0x962eDFa4B7A7E75dcf97e2Bb31B1D028581d16F9",
    "transactionIndex": 14,
    "gasUsed": "1020141",
    "logsBloom": "0x
    "blockHash": "0x63ba299e3a7a868fb65cf4ee4ea8fc8137ea3a5cd6f282a5e40587b0250da9f1",
    "transactionHash": "0x9f03fd28c5318bb9e859b32354ba3660b1b8eb6e9441b83d064a259ee38cb38e",
    "logs": [],
    "blockNumber": 11120623,
    "cumulativeGasUsed": "10489262",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "c8ee1f63c17ee526defd9a985be90e71",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"1cf\",\"details\":\"This contract uses price feeds as a library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as a library\"}},\"title\":\"Crowd funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is a sample of funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Pragma\\n\\npragma solidity ^0.8.8;\\n\\n// Imports\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Errors\\n\\nerror FundMe__NotOwner();\\nerror FundMe__InsufficientFunds();\\n// Interfaces\\n\\n// Libraries\\n\\n// Contracts\\n\\n/** @title Crowd funding Contract\\n *  @author 1cf\\n *  @notice This contract is a sample of funding contract\\n *  @dev This contract uses price feeds as a library\\n */\\n\\ncontract FundMe {\\n    // Type declarations\\n    using PriceConverter for uint256;\\n    // State variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    \\n    address private immutable  i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    \\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /** \\n     *  @notice This function funds this contract\\n     *  @dev This implements price feeds as a library\\n     */\\n\\n    function fund() public payable {\\n        //require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        if(msg.value.getConversionRate(s_priceFeed) < MINIMUM_USD) revert FundMe__InsufficientFunds();\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    function withdraw() payable onlyOwner public {\\n\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    function cheaperWithdraw() payable onlyOwner public{\\n        address[] memory funders =  s_funders;\\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n    function getAddressToAmountFunded(address funder) public view returns (uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n    function getPriceFeed() public view returns (AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n}\",\"keccak256\":\"0xb5bba77cac28ea770df244db9b1993248773d9e80ac9b53f7b24c8ac95e84db3\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\r\\n        // Rinkeby ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n    \\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2d2995b3c79ee3ffd42abf5120b10bf8bbc9ddeab1766c0bca29941ed13e0ae7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200129d3803806200129d833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611117620001866000396000818161032c0152818161057b015281816105cb01526107c101526111176000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610abb565b6102e2565b6040516100cc9190610b01565b60405180910390f35b6100dd61032a565b005b3480156100eb57600080fd5b506100f461056a565b6040516101019190610b01565b60405180910390f35b34801561011657600080fd5b5061011f610577565b60405161012c9190610b2b565b60405180910390f35b34801561014157600080fd5b5061014a61059f565b6040516101579190610ba5565b60405180910390f35b6101686101b1565b005b6101726105c9565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bec565b61088d565b6040516101a89190610b2b565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d590919063ffffffff16565b1015610228576040517f7c82983800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102769190610c48565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103af576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561045a576000600182815481106103d5576103d4610c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045290610ccd565b9150506103b2565b50600067ffffffffffffffff81111561047657610475610d16565b5b6040519080825280602002602001820160405280156104a45781602001602082028036833780820191505090505b50600190805190602001906104ba9291906109b1565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e190610d76565b60006040518083038185875af1925050503d806000811461051e576040519150601f19603f3d011682016040523d82523d6000602084013e610523565b606091505b5050905080610567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055e90610de8565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106d257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610688575b5050505050905060005b815181101561075c5760008282815181106106fa576106f9610c9e565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075490610ccd565b9150506106dc565b50600067ffffffffffffffff81111561077857610777610d16565b5b6040519080825280602002602001820160405280156107a65781602001602082028036833780820191505090505b50600190805190602001906107bc9291906109b1565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080390610d76565b60006040518083038185875af1925050503d8060008114610840576040519150601f19603f3d011682016040523d82523d6000602084013e610845565b606091505b5050905080610889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088090610de8565b60405180910390fd5b5050565b6000600182815481106108a3576108a2610c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108e183610911565b90506000670de0b6b3a764000085836108fa9190610e08565b6109049190610e91565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095a57600080fd5b505afa15801561096e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109929190610f4f565b5050509150506402540be400816109a99190610fca565b915050919050565b828054828255906000526020600020908101928215610a2a579160200282015b82811115610a295782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109d1565b5b509050610a379190610a3b565b5090565b5b80821115610a54576000816000905550600101610a3c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8882610a5d565b9050919050565b610a9881610a7d565b8114610aa357600080fd5b50565b600081359050610ab581610a8f565b92915050565b600060208284031215610ad157610ad0610a58565b5b6000610adf84828501610aa6565b91505092915050565b6000819050919050565b610afb81610ae8565b82525050565b6000602082019050610b166000830184610af2565b92915050565b610b2581610a7d565b82525050565b6000602082019050610b406000830184610b1c565b92915050565b6000819050919050565b6000610b6b610b66610b6184610a5d565b610b46565b610a5d565b9050919050565b6000610b7d82610b50565b9050919050565b6000610b8f82610b72565b9050919050565b610b9f81610b84565b82525050565b6000602082019050610bba6000830184610b96565b92915050565b610bc981610ae8565b8114610bd457600080fd5b50565b600081359050610be681610bc0565b92915050565b600060208284031215610c0257610c01610a58565b5b6000610c1084828501610bd7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c5382610ae8565b9150610c5e83610ae8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c9357610c92610c19565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610cd882610ae8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d0b57610d0a610c19565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d60600083610d45565b9150610d6b82610d50565b600082019050919050565b6000610d8182610d53565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dd2600b83610d8b565b9150610ddd82610d9c565b602082019050919050565b60006020820190508181036000830152610e0181610dc5565b9050919050565b6000610e1382610ae8565b9150610e1e83610ae8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5757610e56610c19565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e9c82610ae8565b9150610ea783610ae8565b925082610eb757610eb6610e62565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ee181610ec2565b8114610eec57600080fd5b50565b600081519050610efe81610ed8565b92915050565b6000819050919050565b610f1781610f04565b8114610f2257600080fd5b50565b600081519050610f3481610f0e565b92915050565b600081519050610f4981610bc0565b92915050565b600080600080600060a08688031215610f6b57610f6a610a58565b5b6000610f7988828901610eef565b9550506020610f8a88828901610f25565b9450506040610f9b88828901610f3a565b9350506060610fac88828901610f3a565b9250506080610fbd88828901610eef565b9150509295509295909350565b6000610fd582610f04565b9150610fe083610f04565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561101f5761101e610c19565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561105c5761105b610c19565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561109957611098610c19565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110d6576110d5610c19565b5b82820290509291505056fea2646970667358221220d86e331e5966f0637ecb23bbd3d1119380622e3100b1bc5297c60906b53958d864736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100df578063893d20e81461010a5761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610abb565b6102e2565b6040516100cc9190610b01565b60405180910390f35b6100dd61032a565b005b3480156100eb57600080fd5b506100f461056a565b6040516101019190610b01565b60405180910390f35b34801561011657600080fd5b5061011f610577565b60405161012c9190610b2b565b60405180910390f35b34801561014157600080fd5b5061014a61059f565b6040516101579190610ba5565b60405180910390f35b6101686101b1565b005b6101726105c9565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bec565b61088d565b6040516101a89190610b2b565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d590919063ffffffff16565b1015610228576040517f7c82983800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102769190610c48565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103af576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561045a576000600182815481106103d5576103d4610c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045290610ccd565b9150506103b2565b50600067ffffffffffffffff81111561047657610475610d16565b5b6040519080825280602002602001820160405280156104a45781602001602082028036833780820191505090505b50600190805190602001906104ba9291906109b1565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104e190610d76565b60006040518083038185875af1925050503d806000811461051e576040519150601f19603f3d011682016040523d82523d6000602084013e610523565b606091505b5050905080610567576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055e90610de8565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106d257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610688575b5050505050905060005b815181101561075c5760008282815181106106fa576106f9610c9e565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075490610ccd565b9150506106dc565b50600067ffffffffffffffff81111561077857610777610d16565b5b6040519080825280602002602001820160405280156107a65781602001602082028036833780820191505090505b50600190805190602001906107bc9291906109b1565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080390610d76565b60006040518083038185875af1925050503d8060008114610840576040519150601f19603f3d011682016040523d82523d6000602084013e610845565b606091505b5050905080610889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088090610de8565b60405180910390fd5b5050565b6000600182815481106108a3576108a2610c9e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108e183610911565b90506000670de0b6b3a764000085836108fa9190610e08565b6109049190610e91565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095a57600080fd5b505afa15801561096e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109929190610f4f565b5050509150506402540be400816109a99190610fca565b915050919050565b828054828255906000526020600020908101928215610a2a579160200282015b82811115610a295782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109d1565b5b509050610a379190610a3b565b5090565b5b80821115610a54576000816000905550600101610a3c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8882610a5d565b9050919050565b610a9881610a7d565b8114610aa357600080fd5b50565b600081359050610ab581610a8f565b92915050565b600060208284031215610ad157610ad0610a58565b5b6000610adf84828501610aa6565b91505092915050565b6000819050919050565b610afb81610ae8565b82525050565b6000602082019050610b166000830184610af2565b92915050565b610b2581610a7d565b82525050565b6000602082019050610b406000830184610b1c565b92915050565b6000819050919050565b6000610b6b610b66610b6184610a5d565b610b46565b610a5d565b9050919050565b6000610b7d82610b50565b9050919050565b6000610b8f82610b72565b9050919050565b610b9f81610b84565b82525050565b6000602082019050610bba6000830184610b96565b92915050565b610bc981610ae8565b8114610bd457600080fd5b50565b600081359050610be681610bc0565b92915050565b600060208284031215610c0257610c01610a58565b5b6000610c1084828501610bd7565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c5382610ae8565b9150610c5e83610ae8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c9357610c92610c19565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610cd882610ae8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d0b57610d0a610c19565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d60600083610d45565b9150610d6b82610d50565b600082019050919050565b6000610d8182610d53565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610dd2600b83610d8b565b9150610ddd82610d9c565b602082019050919050565b60006020820190508181036000830152610e0181610dc5565b9050919050565b6000610e1382610ae8565b9150610e1e83610ae8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5757610e56610c19565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e9c82610ae8565b9150610ea783610ae8565b925082610eb757610eb6610e62565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ee181610ec2565b8114610eec57600080fd5b50565b600081519050610efe81610ed8565b92915050565b6000819050919050565b610f1781610f04565b8114610f2257600080fd5b50565b600081519050610f3481610f0e565b92915050565b600081519050610f4981610bc0565b92915050565b600080600080600060a08688031215610f6b57610f6a610a58565b5b6000610f7988828901610eef565b9550506020610f8a88828901610f25565b9450506040610f9b88828901610f3a565b9350506060610fac88828901610f3a565b9250506080610fbd88828901610eef565b9150509295509295909350565b6000610fd582610f04565b9150610fe083610f04565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561101f5761101e610c19565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561105c5761105b610c19565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561109957611098610c19565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110d6576110d5610c19565b5b82820290509291505056fea2646970667358221220d86e331e5966f0637ecb23bbd3d1119380622e3100b1bc5297c60906b53958d864736f6c63430008080033",
  "devdoc": {
    "author": "1cf",
    "details": "This contract uses price feeds as a library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as a library"
      }
    },
    "title": "Crowd funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is a sample of funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 76,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}